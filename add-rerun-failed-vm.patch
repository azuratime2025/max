*** Begin Patch
*** Update File: app/src/main/java/com/example/crashcourse/viewmodel/BulkRegistrationViewModel.kt
@@
 class BulkRegistrationViewModel : ViewModel() {
     private val _state = MutableStateFlow(ProcessingState())
     val state = _state.asStateFlow()
+
+    // Cache CSV terakhir agar bisa re-run baris yang gagal
+    private var lastStudents: Map<String, CsvImportUtils.CsvStudentData> = emptyMap()
@@
-            val csvResult = CsvImportUtils.parseCsvFile(context, uri)
+            val csvResult = CsvImportUtils.parseCsvFile(context, uri)
+            // simpan ke cache untuk re-run
+            lastStudents = csvResult.students.associateBy { it.studentId }
@@
                 }
             }
@@
             _state.value = ProcessingState(
                 isProcessing = false,
                 results = results,
                 successCount = successCount,
                 duplicateCount = duplicateCount,
                 errorCount = errorCount,
                 status = "Processed $successCount students successfully"
             )
         } catch (e: Exception) {
             _state.value = ProcessingState(
                 isProcessing = false,
                 status = "Processing failed: ${e.message}",
                 errorCount = 1
             )
         }
     }
+
+    /** Re-run hanya rows yang sebelumnya Error */
+    fun rerunFailed(context: Context, faceViewModel: com.example.crashcourse.ui.components.FaceViewModel) {
+        val current = state.value
+        if (current.isProcessing) return
+        val failedIds = current.results.filter { it.status == "Error" }.map { it.studentId }
+        if (failedIds.isEmpty()) return
+
+        viewModelScope.launch {
+            try {
+                _state.value = current.copy(
+                    isProcessing = true,
+                    status = "Re-running ${failedIds.size} failed rows..."
+                )
+
+                // Siapkan list hasil baru (replace hasil yang gagal)
+                val newResults = current.results.toMutableList()
+                var addSuccess = 0
+                var addDuplicate = 0
+                var addError = 0
+
+                for (sid in failedIds) {
+                    val student = lastStudents[sid]
+                    if (student == null) {
+                        // tidak ada di cache, tandai tetap error
+                        val idx = newResults.indexOfFirst { it.studentId == sid }
+                        if (idx >= 0) {
+                            newResults[idx] = newResults[idx].copy(
+                                status = "Error",
+                                error = "Missing cached data"
+                            )
+                        }
+                        addError++
+                        continue
+                    }
+
+                    try {
+                        val result = processStudent(context, student, faceViewModel)
+                        val idx = newResults.indexOfFirst { it.studentId == sid }
+                        if (idx >= 0) newResults[idx] = result else newResults.add(result)
+                        when {
+                            result.status == "Registered" -> addSuccess++
+                            result.status.startsWith("Duplicate") -> addDuplicate++
+                            else -> addError++
+                        }
+                    } catch (e: Exception) {
+                        val idx = newResults.indexOfFirst { it.studentId == sid }
+                        val fallback = com.example.crashcourse.utils.ProcessResult(
+                            studentId = sid,
+                            name = lastStudents[sid]?.name ?: sid,
+                            status = "Error",
+                            error = e.message ?: "Re-run failed"
+                        )
+                        if (idx >= 0) newResults[idx] = fallback else newResults.add(fallback)
+                        addError++
+                    }
+                }
+
+                // Hitung ulang agregat
+                val successCount = newResults.count { it.status == "Registered" }
+                val duplicateCount = newResults.count { it.status.startsWith("Duplicate") }
+                val errorCount = newResults.count { it.status == "Error" }
+
+                _state.value = current.copy(
+                    isProcessing = false,
+                    results = newResults,
+                    successCount = successCount,
+                    duplicateCount = duplicateCount,
+                    errorCount = errorCount,
+                    status = "Re-run done: +$addSuccess ok, +$addDuplicate dup, +$addError err"
+                )
+            } catch (e: Exception) {
+                _state.value = current.copy(
+                    isProcessing = false,
+                    status = "Re-run failed: ${e.message}"
+                )
+            }
+        }
+    }
*** End Patch
